$*
Returns a single string (``$1, $2 ... $n'') comprising all of the positional parameters separated by the internal field separator character (defined by the IFS environment variable).

$@
Returns a sequence of strings (``$1'', ``$2'', ... ``$n'') wherein each positional parameter remains separate from the others.

$1, $2 ... $n
Refers to a numbered argument to the script, where n is the position of the argument on the command line. In the Korn shell you can refer directly to arguments where n is greater than 9 using braces. For example, to refer to the 57th positional parameter, use the notation ${57}. In the other shells, to refer to parameters with numbers greater than 9, use the shift command; this shifts the parameter list to the left. $1 is lost, while $2 becomes $1, $3 becomes $2, and so on. The inaccessible tenth parameter becomes $9 and can then be referred to.

$0
Refers to the name of the script itself.

$#
Refers to the number of arguments specified on a command line.

example:
  echo There are $# arguments to $0: $*
  echo first argument: $1
  echo second argument: $2
  echo third argument: $3
  echo here they are again: $@
  function how_many {
    print "$# arguments were supplied."
  }
  how_many "$*"
  how_many "$@"

result:
  mytest foo bar quux
  There are 3 arguments to mytest: foo bar quux
  first argument: foo
  second argument: bar
  third argument: quux
  here they are again: foo bar quux
  1 arguments were supplied.
  3 arguments were supplied.



//color
Black        0;30     Dark Gray     1;30
Red          0;31     Light Red     1;31
Green        0;32     Light Green   1;32
Brown/Orange 0;33     Yellow        1;33
Blue         0;34     Light Blue    1;34
Purple       0;35     Light Purple  1;35
Cyan         0;36     Light Cyan    1;36
Light Gray   0;37     White         1;37

example:
  RED='\033[0;31m'
  
