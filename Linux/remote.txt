参考网址：http://man.linuxde.net/
ST=${HOST} bash /tmp/install.sh   //install.sh中存在变量HOST
取值方式：
    username=${username:-yesterdaytime}   //如果username为空则username =  yesterdaytime
判断非空：
    -z $str //$str为空 true 不为空 false
    -n $str //$str为空 false 不为空 true
判断包含：
    =~：判断左边的字符串是否能够被右边的模式所匹配，通常用于双中括号中
set:
    -a：标示已修改的变量，以供输出至环境变量。
    -b：使被中止的后台程序立刻回报执行状态。
    -C：转向所产生的文件无法覆盖已存在的文件。
    -d：Shell预设会用杂凑表记忆使用过的指令，以加速指令的执行。使用-d参数可取消。
    -e：若指令传回值不等于0，则立即退出shell。
    -f：取消使用通配符。
    -h：自动记录函数的所在位置。
    -H Shell：可利用"!"加<指令编号>的方式来执行history中记录的指令。
    -k：指令所给的参数都会被视为此指令的环境变量。
    -l：记录for循环的变量名称。
    -m：使用监视模式。
    -n：只读取指令，而不实际执行。
    -p：启动优先顺序模式。
    -P：启动-P参数后，执行指令时，会以实际的文件或目录来取代符号连接。
    -t：执行完随后的指令，即退出shell。
    -u：当执行时使用到未定义过的变量，则显示错误信息。
    -v：显示shell所读取的输入值。
    -x：执行指令后，会先显示该指令及所下的参数。



命令区
ssh : ssh username@host  //login in the host

        //生成key，方便登录  https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/
        ssh-keygen -t dsa
        scp ~/.ssh/id_dsa.pub username@arvo.suso.org:.ssh/authorized_keys
        chmod 700 ~/.ssh
        chmod 600 ~/.ssh/authorized_keys
        cat ~/.ssh/id_dsa.pub

        ssh-copy-id yourusername@your.website.com
        ssh-copu-id -i ~/.ssh/id_dsa.pub yourusername@your.website.com


curl:
        curl -k -s -i -m 20 -H 'Accept:application/*+xml;version=20.0' -H "${AUTHORIZATION}" https://${IP}/api/sessions | grep authorization|tr -d '\r'
        //将返回值作为参数
        vcd_result=$(curl -k -s -m 20 -o /dev/null -w %{http_code} https://${VCD_IP}/api/server_status)
        -o /dev/null 输出为空
        -u, --user USER[:PASSWORD]  Server user and password
            --tlsuser USER  TLS username
            --tlspassword STRING  TLS password
            --tlsauthtype STRING  TLS authentication type (default: SRP)
            --unix-socket FILE    Connect through this Unix domain socket
        -w
            url_effective 最终获取的url地址，尤其是当你指定给curl的地址存在301跳转，且通过-L继续追踪的情形。

            http_code http状态码，如200成功,301转向,404未找到,500服务器错误等。(The numerical response code that was found in the last retrieved HTTP(S) or FTP(s) transfer. In 7.18.2 the alias response_code was added to show the same info.)

            http_connect The numerical code that was found in the last response (from a proxy) to a curl CONNECT request. (Added in 7.12.4)

            time_total 总时间，按秒计。精确到小数点后三位。 （The total time, in seconds, that the full operation lasted. The time will be displayed with millisecond resolution.）

            time_namelookup DNS解析时间,从请求开始到DNS解析完毕所用时间。(The time, in seconds, it took from the start until the name resolving was completed.)

            time_connect 连接时间,从开始到建立TCP连接完成所用时间,包括前边DNS解析时间，如果需要单纯的得到连接时间，用这个time_connect时间减去前边time_namelookup时间。以下同理，不再赘述。(The time, in seconds, it took from the start until the TCP connect to the remote host (or proxy) was completed.)

            time_appconnect 连接建立完成时间，如SSL/SSH等建立连接或者完成三次握手时间。(The time, in seconds, it took from the start until the SSL/SSH/etc connect/handshake to the remote host was completed. (Added in 7.19.0))

            time_pretransfer 从开始到准备传输的时间。(The time, in seconds, it took from the start until the file transfer was just about to begin. This includes all pre-transfer commands and negotiations that are specific to the particular protocol(s) involved.)

            time_redirect 重定向时间，包括到最后一次传输前的几次重定向的DNS解析，连接，预传输，传输时间。(The time, in seconds, it took for all redirection steps include name lookup, connect, pretransfer and transfer before the final transaction was started. time_redirect shows the complete execution time for multiple redirections. (Added in 7.12.3))

            time_starttransfer 开始传输时间。在发出请求之后，Web 服务器返回数据的第一个字节所用的时间(The time, in seconds, it took from the start until the first byte was just about to be transferred. This includes time_pretransfer and also the time the server needed to calculate the result.)

            size_download 下载大小。(The total amount of bytes that were downloaded.)

            size_upload 上传大小。(The total amount of bytes that were uploaded.)

            size_header  下载的header的大小(The total amount of bytes of the downloaded headers.)

            size_request 请求的大小。(The total amount of bytes that were sent in the HTTP request.)

            speed_download 下载速度，单位-字节每秒。(The average download speed that curl measured for the complete download. Bytes per second.)

            speed_upload 上传速度,单位-字节每秒。(The average upload speed that curl measured for the complete upload. Bytes per second.)

            content_type 就是content-Type，不用多说了，这是一个访问我博客首页返回的结果示例(text/html; charset=UTF-8)；(The Content-Type of the requested document, if there was any.)

            num_connects Number of new connects made in the recent transfer. (Added in 7.12.3)

            num_redirects Number of redirects that were followed in the request. (Added in 7.12.3)

            redirect_url When a HTTP request was made without -L to follow redirects, this variable will show the actual URL a redirect would take you to. (Added in 7.18.2)

            ftp_entry_path The initial path libcurl ended up in when logging on to the remote FTP server. (Added in 7.15.4)

            ssl_verify_result ssl认证结果，返回0表示认证成功。( The result of the SSL peer certificate verification that was requested. 0 means the verification was successful. (Added in 7.19.0))

        -s 安静输出
        -H 请求header赋值

sed:
        sed -i "s#127.0.0.1#${VCD_HOST}#g" $BASE/dr2c/conf/config.yml

ssh-keygen：
    -b：指定密钥长度； 
    -e：读取openssh的私钥或者公钥文件； 
    -C：添加注释； 
    -f：指定用来保存密钥的文件名； 
    -i：读取未加密的ssh-v2兼容的私钥/公钥文件，然后在标准输出设备上显示openssh兼容的私钥/公钥； 
    -l：显示公钥文件的指纹数据； 
    -N：提供一个新密语； 
    -P：提供（旧）密语； 
    -q：静默模式； 
    -t：指定要创建的密钥类型。

